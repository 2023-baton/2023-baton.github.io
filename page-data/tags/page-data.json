{"componentChunkName":"component---src-pages-tags-jsx","path":"/tags/","result":{"data":{"site":{"siteMetadata":{"title":"baton"}},"allMarkdownRemark":{"group":[{"fieldValue":"database","totalCount":1},{"fieldValue":"docker","totalCount":2},{"fieldValue":"github actions","totalCount":1},{"fieldValue":"self-hosted","totalCount":1}],"nodes":[{"excerpt":"💬 개요 먼저 지속적 배포(CD, Continuous Deploy)를 구축하기 위해서 다음과 같은 기술을 선택했습니다. GitHub Self Hosted Runner : 현재 클라우드 상황에 적합하다. Docker Hub : EC2 내부에서 스프링 프로젝트가 빌드(build)된 이미지(Image)를 가져와 실행할 수 있다. image ✅ GitHub Se…","fields":{"slug":"/02.GitHub_Self_Hosted_Runner_Docker_Hub를_이용한_지속적_배포/"},"frontmatter":{"date":"July 31, 2023","update":"Jul 31, 2023","title":"지속적 배포(CD)를 GitHub Self Hosted Runner와 Docker Hub로 해보자","tags":["docker","github actions","self-hosted"]}},{"excerpt":"안녕하세요 이번에 바톤 프로젝트를 기초 세팅하는 시간을 가졌는데요. 그 중 docker로 DB를 관리하는 부분이 기억에 남아 글로 기록해보려합니다. docker로 DB를 관리하게 된 이유 1. 일관된 환경 도커 이미지를 사용하면 개발, 로컬, 운영 환경에서 모두 동일한 이미지를 배포할 수 있습니다.\n즉, 모든 데이터베이스의 환경을 동일하게 유지할 수 있고…","fields":{"slug":"/first/"},"frontmatter":{"date":"July 20, 2023","update":"Jul 20, 2023","title":"🐳 도커로 DB 관리하기","tags":["docker","database"]}}]}},"pageContext":{}},"staticQueryHashes":[],"slicesMap":{}}