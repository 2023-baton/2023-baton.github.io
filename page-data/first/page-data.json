{"componentChunkName":"component---src-templates-post-jsx","path":"/first/","result":{"data":{"site":{"siteMetadata":{"title":"baton"}},"markdownRemark":{"id":"c961aef8-cb7b-5012-8cb0-3c3ed46bacd6","excerpt":"안녕하세요 이번에 바톤 프로젝트를 기초 세팅하는 시간을 가졌는데요. 그 중 docker로 DB를 관리하는 부분이 기억에 남아 글로 기록해보려합니다. docker로 DB를 관리하게 된 이유 1. 일관된 환경 도커 이미지를 사용하면 개발, 로컬, 운영 환경에서 모두 동일한 이미지를 배포할 수 있습니다.\n즉, 모든 데이터베이스의 환경을 동일하게 유지할 수 있고…","html":"<p>안녕하세요 이번에 바톤 프로젝트를 기초 세팅하는 시간을 가졌는데요. 그 중 docker로 DB를 관리하는 부분이 기억에 남아 글로 기록해보려합니다.</p>\n<h2>docker로 DB를 관리하게 된 이유</h2>\n<h3>1. 일관된 환경</h3>\n<p>도커 이미지를 사용하면 개발, 로컬, 운영 환경에서 모두 동일한 이미지를 배포할 수 있습니다.\n즉, 모든 데이터베이스의 환경을 동일하게 유지할 수 있고 환경 변화가 있다면 동일하게 환경을 변경시킬 수 있습니다.</p>\n<p>또한 도커 컴포즈를 이용하여 로컬에서도 동료들간 같은 환경을 구성하여 DB를 사용할 수 있습니다.</p>\n<h3>2. 환경 충돌 방지</h3>\n<p>우아한테크코스에서 DB를 위한 ec2 인스턴스는 1개만 제공되었습니다.\n나중에 mysql 뿐만 아니라 다른 db를 추가하게 되는 경우에 인스턴스 내부에서 환경이 얽힐수도 있겠다는 생각을 했습니다.\n만약 도커를 이용하여 컨테이너를 분리하게 된다면 환경이 얽힐 일이 없고, 더 안정적인 운영이 가능하다고 생각했습니다.</p>\n<h3>3. 손쉬운 스케일링</h3>\n<p>서비스가 커지게되면 트래픽이 늘어나고 부하가 발생할 수 있는데요.\n이때 도커를 이용하면 컨테이너를 필요한 시점에 빠르게 확장하거나 축소할 수 있습니다.</p>\n</br>\n<h2>EC2에 도커 설치</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> snap <span class=\"token function\">install</span> <span class=\"token function\">docker</span></code></pre></div>\n<p>명령어를 이용하여 도커를 설치합니다.</p>\n<p>처음에는 <code class=\"language-text\">apt update</code>와 <code class=\"language-text\">apt install</code> 명령어를 통해 도커를 설치하려 했는데, 잘 되지 않았습니다.\n찾아보니 요즘은 <code class=\"language-text\">snap</code>을 사용하면 더 간단히 도커를 설치할 수 있기에 <code class=\"language-text\">snap</code> 사용을 권장한다고 하네요.\n<img src=\"https://velog.velcdn.com/images/hooni_/post/25198967-049d-4723-9a59-c0b4ca7e5857/image.png\"></p>\n<p>위와 같이 설치를 완료했습니다.\n<img src=\"https://velog.velcdn.com/images/hooni_/post/6dcd0c64-4f45-491f-b172-b850c0a0febb/image.png\"></p>\n<p>저는 매번 <code class=\"language-text\">sudo</code>를 이용하여 권한 인증하는 것이 귀찮아서 추가적인 설정을 통해 일반 사용자도 도커에 접근할 수 있도록 설정했습니다.\n과정은 <a href=\"https://snapcraft.io/docker\">해당 링크</a>를 참고했습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"> <span class=\"token function\">sudo</span> addgroup <span class=\"token parameter variable\">--system</span> <span class=\"token function\">docker</span>\n <span class=\"token function\">sudo</span> adduser <span class=\"token environment constant\">$USER</span> <span class=\"token function\">docker</span>\n newgrp <span class=\"token function\">docker</span>\n <span class=\"token function\">sudo</span> snap disable <span class=\"token function\">docker</span>\n <span class=\"token function\">sudo</span> snap <span class=\"token builtin class-name\">enable</span> <span class=\"token function\">docker</span></code></pre></div>\n<h3>before</h3>\n<p><img src=\"https://velog.velcdn.com/images/hooni_/post/103f8395-0ee3-4eb8-935d-5fc165ae413c/image.png\"></p>\n<h3>after</h3>\n<p><img src=\"https://velog.velcdn.com/images/hooni_/post/f1634b4b-120e-4808-943c-34a901dedf99/image.png\"></p>\n</br>\n<h2>도커에 mysql 컨테이너 설치</h2>\n<h3>이미지 다운</h3>\n<p>도커에서 mysql 이미지를 다운받습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> pull mysql</code></pre></div>\n<p>도커에서 <strong>이미지</strong>란 하나의 환경파일(?)을 말합니다. nginx, mysql, node 등등 많은 이미지들이 있는데, 사용 목적에 맞게 이미지를 선택해서 컨테이너로 생성하면 해당 이미지에 맞는 환경이 설치된 상태로 컨테이너를 사용할 수 있습니다.\nOOP에서 원하는 클래스의 인스턴스를 생성하는 것과 비슷한 느낌이라고 할 수 있겠습니다.</p>\n<p><img src=\"https://velog.velcdn.com/images/hooni_/post/9994784b-ed69-470b-8d09-e0323d42bc15/image.png\"></p>\n<p>mysql 이미지가 정상적으로 깔린 것을 확인할 수 있습니다.\n<code class=\"language-text\">tag</code>는 버전을 뜻하는데, latest는 가장 최신버전이라는 뜻입니다. 만약 제가 <code class=\"language-text\">docker pull mysql:8.0.33</code> 명령어로 이미지를 풀 받게 되면 해당 버전의 mysql을 풀 받습니다.</p>\n<p><img src=\"https://velog.velcdn.com/images/hooni_/post/1dae895b-e8e4-48f4-88b1-19527ffb205e/image.png\"></p>\n<p>현재 가장 최근 버전의 mysql이 8.0.33 이어서 image id가 같은 것 같습니다.</p>\n<h3>컨테이너 생성 &#x26; 실행</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">--name</span> mysql-dev-container <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">MYSQL_ROOT_PASSWORD</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>비밀번호<span class=\"token punctuation\">}</span> <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">-p</span> <span class=\"token number\">3306</span>:3306 mysql:latest</code></pre></div>\n<p>해석하자면, </p>\n<ul>\n<li><code class=\"language-text\">--name</code>: <code class=\"language-text\">mysql-dev-container</code>의 이름으로 컨테이너를 실행한다.</li>\n<li><code class=\"language-text\">-e</code>: 컨테이너의 환경 변수중 <code class=\"language-text\">MYSQL_ROOT_PASSWORD</code>를 입력한 비밀번호로 설정한다.</li>\n<li><code class=\"language-text\">-d</code>: 데몬 모드로 실행한다. (백그라운드 모드)</li>\n<li><code class=\"language-text\">-p</code>: 호스트 포트:컨테이너 포트로 설정한다.</li>\n<li>이미지는 <code class=\"language-text\">mysql:latest</code> 로 설정한다.</li>\n</ul>\n<p><img src=\"https://velog.velcdn.com/images/hooni_/post/f3d174f9-732d-49c7-befb-1bc570d1e138/image.png\"></p>\n<p>정상적으로 컨테이너가 생긴 것을 확인할 수 있습니다.</p>\n<p>이제 컨테이너에 접속해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> <span class=\"token punctuation\">{</span>컨테이너 Id<span class=\"token punctuation\">}</span> <span class=\"token function\">bash</span></code></pre></div>\n<p>위 명령어를 통해 도커 컨테이너 bash에 접속했습니다.</p>\n<h3>mysql에 db 생성</h3>\n<p>이제 컨테이너에 mysql database를 설치해보도록 하겠습니다.\n여기부터는 일반 리눅스나 맥에서 database 생성하는 것과 똑같습니다.</p>\n<p>먼저 mysql에 접속합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">mysql <span class=\"token parameter variable\">-u</span> root <span class=\"token parameter variable\">-p</span></code></pre></div>\n<p>그리고, database를 생성합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">create database ditoo_dev<span class=\"token punctuation\">;</span></code></pre></div>\n<p>intellij에서 생성한 db에 정상적으로 접근되는지 확인해보겠습니다!\n<img src=\"https://velog.velcdn.com/images/hooni_/post/92c5d4df-6651-44da-aa40-dea62909261e/image.png\">\n정상적으로 접근되었습니다.</p>\n<p>간단한 post, tag, post_tag 테이블을 만들어 table이 정상적으로 생성되는지 확인해보도록 하겠습니다.</p>\n<p><img src=\"https://velog.velcdn.com/images/hooni_/post/cb75119b-fa86-476b-9b26-bcf9001e992d/image.png\"></p>\n<p>스프링 어플리케이션에서는 정상적으로 테이블이 생성된 것을 확인했습니다.</p>\n<p><img src=\"https://velog.velcdn.com/images/hooni_/post/19117d25-f71e-4d01-b1fb-65e754bf582a/image.png\"></p>\n<p>db에도 정상적으로 table이 생긴 것을 확인할 수 있었습니다.</p>\n</br>\n<h2>마치며</h2>\n<p>docker로 간단하게 db를 관리하는 것을 학습했습니다.\n다음 시간에는 docker-compose를 이용하여 db, spring, react 모두 같이 관리하는 방법에 대해 학습해보려 합니다.</p>","frontmatter":{"title":"🐳 도커로 DB 관리하기","date":"July 20, 2023","update":"July 20, 2023","tags":["docker","database"],"series":"도커"},"fields":{"slug":"/first/","readingTime":{"minutes":6.705}}},"seriesList":{"edges":[{"node":{"id":"c961aef8-cb7b-5012-8cb0-3c3ed46bacd6","fields":{"slug":"/first/"},"frontmatter":{"title":"🐳 도커로 DB 관리하기"}}}]},"previous":null,"next":null},"pageContext":{"id":"c961aef8-cb7b-5012-8cb0-3c3ed46bacd6","series":"도커","previousPostId":null,"nextPostId":null}},"staticQueryHashes":[],"slicesMap":{}}